#进阶2：条件查询 /* 语法 select 查询列表 from 表名 where 筛选条件； 分类：

一、按条件表达式筛选 条件运算符：> < = ！= <>不等于 >= <=

二、按逻辑表达式筛选 逻辑运算符： 作用：用于链接条件表达式 && || ！ and or not &&和and：两个条件都未true，结果为true，反之为false ||或or：只要有一个条件为true，结果为true，反之为false ！或not：如果链接的条件本身为false，结果为true，反之为false

三、模糊查询 like between and is null */ #一、按条件表示筛选 #案例1：查询工资>12000的员工信息 SELECT * FROM employees WHERE salary >12000; #案例2：查询部门编号不等于90号的员工名和部门编号 SELECT last_name, department_id FROM employees WHERE department_id<>90;

#二、按逻辑表达式筛选 #案例1：查询工资在10000到20000之间的员工名、工资以及奖金 SELECT last_name,salary,commission_pct FROM employees WHERE salary>=10000 AND salary <=20000; #案例2:查询部门编号不是在90到110 之间，或者工资高于15000的员工信息 SELECT FROM employees WHERE department_id<90 OR department_id>110 OR salary>15000;

#三、模糊查询 /* like ⑴一般和通配符搭配使用 通配符： % 任意多个字符 _ 任意单个字符 \ 转义符号和 ESCAPE '$' between and in is null|is not null */

#1.like #案例1：查询员工名中包含字符a的员工信息 SELECT * FROM employees WHERE last_name LIKE '%a%';

#案例2：查询员工名中第三个字符为e，第五个字符为a的员工名和工资 SELECT last_name,salary FROM employees WHERE last_name LIKE '__n_l%';

#案例3：查询员工命中第二个字符为——的员工名 SELECT last_name FROM employees WHERE last_name LIKE '$%' ESCAPE '$';

#2.between and /* ⑴使用between and 可以提高语句的简洁度 ⑵包含临界值 ⑶两个临界值不要调换顺序 ⑷两个值得类型必须一致 */

#案例1：查询员工编号在100到120之间的员工信息 SELECT * FROM employees WHERE employee_id >=100 AND employee_id<=120； #-------- SELECT * FROM employees WHERE employee_id BETWEEN 100 AND 120；

#3.in /* 含义：判断某字段的值是否属于in列表中的一项 特点： ⑴使用in提高语句简洁度 ⑵in列表的值类型必须统一或兼容（‘123’ 123） ⑶不支持通配符 */ #案例：查询员工的工种编号是 it_prog、ad_vp、ad_pres 中的一个员工名和工种编号 SELECT last_name, job_id FROM employees WHERE job_id = 'it_prog' OR job_id = 'ad_vp' OR job_id ='ad_pres'; #-------------------- SELECT last_name, job_id FROM employees WHERE job_id IN('it_prog','ad_vp','ad_pres');

#4.is null /* =或<>不能用于判断null值 is null 或is not null 可以判断null值 is 不能判断其他值 */

#案例1：查询没有奖金的员工名和奖金率 SELECT last_name,commission_pct FROM employees WHERE commission_pct IS NOT NULL; #安全等于 <=>

#案例1：查询没有奖金的员工名和奖金率 SELECT last_name,commission_pct FROM employees WHERE commission_pct <=> NULL; #is null pk <=> IS NULL:仅仅可以判断null值，可读性较高，建议使用 <=> :既可以判断null值，又可以判断普通的数值，可读性较低
